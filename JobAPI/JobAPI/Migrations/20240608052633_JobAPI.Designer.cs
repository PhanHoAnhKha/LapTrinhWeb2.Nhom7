// <auto-generated />
using System;
using JobAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240608052633_JobAPI")]
    partial class JobAPI
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobAPI.Models.Domain.Job", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobID");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobID = 1,
                            Description = "Thiết kế những fontend đẹp và hoành tráng.",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Mới làm",
                            Title = "Designer"
                        },
                        new
                        {
                            JobID = 2,
                            Description = "Làm ra những trang web hiện tại.",
                            StartDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Sắp xong",
                            Title = "IT"
                        });
                });

            modelBuilder.Entity("JobAPI.Models.Domain.JobStaff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("JobID");

                    b.HasIndex("StaffID");

                    b.ToTable("JobStaffs");
                });

            modelBuilder.Entity("JobAPI.Models.Domain.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffID"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffID");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            StaffID = 1,
                            Email = "thach04@gmail.com",
                            Position = "Hậu Cần",
                            StaffName = "Nguyễn Hữu Thạch"
                        },
                        new
                        {
                            StaffID = 2,
                            Email = "long04@gmail.com",
                            Position = "Trưởng Phòng",
                            StaffName = "Trần Kim Long"
                        });
                });

            modelBuilder.Entity("JobAPI.Models.Domain.JobStaff", b =>
                {
                    b.HasOne("JobAPI.Models.Domain.Job", "Job")
                        .WithMany("JobStaffs")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobAPI.Models.Domain.Staff", "Staff")
                        .WithMany("JobStaffs")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("JobAPI.Models.Domain.Job", b =>
                {
                    b.Navigation("JobStaffs");
                });

            modelBuilder.Entity("JobAPI.Models.Domain.Staff", b =>
                {
                    b.Navigation("JobStaffs");
                });
#pragma warning restore 612, 618
        }
    }
}
